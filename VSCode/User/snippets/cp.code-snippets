{
	"competitive-programming-template": {
		"prefix": "cp",
		"body": [
    "//Author: vietdoo",
    "#include <bits/stdc++.h>",
    "using namespace std;",
    "",
    "#define fi first",
    "#define se second",
    "#define pii pair <int, int>",
    "#define pb push_back",
    "#define int long long",
    "#define el '\\n'",
    "#define len(a) a.length()",
    "#define all(c) (c).begin(), (c).end()",
    "#define each(x, a) for (auto& x: a)",
    "#define F_OR(i, a, b, s) for (int i=(a); (s)>0?i<(b):i>(b); i+=(s))",
    "#define F_OR1(e) F_OR(i, 0, e, 1)",
    "#define F_OR2(i, e) F_OR(i, 0, e, 1)",
    "#define F_OR3(i, b, e) F_OR(i, b, e, 1)",
    "#define F_OR4(i, b, e, s) F_OR(i, b, e, s)",
    "#define GET5(a, b, c, d, e, ...) e",
    "#define F_ORC(...) GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1)",
    "#define FOR(...) F_ORC(__VA_ARGS__)(__VA_ARGS__)",
    "",
    "template<class A> void scan(vector<A>& v);",
    "template<class A, size_t S> void scan(array<A, S>& a);",
    "template<class T> void scan(T& x) {",
    "	cin >> x;",
    "}",
    "void scan(double& d) {",
    "	string t;",
    "	scan(t);",
    "	d = stod(t);",
    "}",
    "void scan(long double& d) {",
    "	string t;",
    "	scan(t);",
    "	d = stold(t);",
    "}",
    "template<class H, class... T> void scan(H& h, T&... t) {",
    "	scan(h);",
    "	scan(t...);",
    "}",
    "template<class A> void scan(vector<A>& x) {",
    "	each(a, x)",
    "		scan(a);",
    "}",
    "template<class A, size_t S> void scan(array<A, S>& x) {",
    "	each(a, x)",
    "		scan(a);",
    "}",
    "string to_string(char c) {",
    "	return string(1, c);",
    "}",
    "string to_string(bool b) {",
    "	return b ? \"true\" : \"false\";",
    "}",
    "string to_string(const char* s) {",
    "	return string(s);",
    "}",
    "string to_string(string s) {",
    "	return s;",
    "}",
    "string to_string(vector<bool> v) {",
    "	string res;",
    "	FOR((int)(v).size())",
    "		res += char('0' + v[i]);",
    "	return res;",
    "}",
    "",
    "template<size_t S> string to_string(bitset<S> b) {",
    "	string res;",
    "	FOR(S)",
    "		res += char('0' + b[i]);",
    "	return res;",
    "}",
    "template<class T> string to_string(T v) {",
    "	bool f = 1;",
    "	string res;",
    "	each(x, v) {",
    "		if (!f)",
    "			res += ' ';",
    "		f = 0;",
    "		res += to_string(x);",
    "	}",
    "	return res;",
    "}",
    "",
    "template<class A> void write(A x) {",
    "	cout << to_string(x);",
    "}",
    "template<class H, class... T> void write(const H& h, const T&... t) {",
    "	write(h);",
    "	write(t...);",
    "}",
    "void print() {",
    "	write(\"\\n\");",
    "}",
    "template<class H, class... T> void print(const H& h, const T&... t) {",
    "	write(h);",
    "	if (sizeof...(t))",
    "		write(' ');",
    "	print(t...);",
    "}",
    "void DBG() {",
    "	cerr << \"]\" << endl;",
    "}",
    "template<class H, class... T> void DBG(H h, T... t) {",
    "	cerr << to_string(h);",
    "	if (sizeof...(t))",
    "		cerr << \", \";",
    "	DBG(t...);",
    "}",
    "template<typename T>T min(const vector<T>& v) { return *min_element(v.begin(), v.end()); }",
    "template<typename T>T max(const vector<T>& v) { return *max_element(v.begin(), v.end()); }",
    "template<typename T>T acc(const vector<T>& v) { return accumulate(v.begin(), v.end(), T(0)); };",
    "template<typename T>T reverse(const T& v) { return T(v.rbegin(), v.rend()); };",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "//MAIN ",
    "",
    "const int mod = 1000000007;",
    "const int oo = 2e10 + 9;",
    "const int N = 1e6 + 9;",
    "int t = 1, n, m, k;",
    "vector<int> a(N, 0);",
    "",
    "void Main() {",
    "",
    "	$1",
    "}",
    "",
    "signed main() {",
    "	ios_base::sync_with_stdio(false);",
    "	cin.tie(nullptr);",
    "#ifndef ONLINE_JUDGE",
    "	freopen(\"input.txt\", \"r\", stdin);",
    "	//freopen(\"output.txt\", \"w\", stdout);",
    "#endif ",
    "",
    "	cin >> t;",
    "	while (t--) {",
    "		Main();",
    "	}",
    "",
    "	return 0;",
    "}"
  	],
		"description": "competitive-programming-template"
	  }
}
